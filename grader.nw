\section{Introduction}

We want to set up a Docker container to run all grading and reporting in it.
The advantage is that we always run in a working environment with all 
dependencies up-to-date to our specific tools for the task.

The document is organized as follows.

Section \ref{BasicUsage} covers the basic usage of the Docker container:
What do we need to provide for it to work.
And how do we use it as an interactive shell.

Section \ref{DetailedUsage} covers how to use the container in a 
non-interactive way, that is, using it for automation.

Section \ref{CronJob} generalizes the contents from Section \ref{DetailedUsage} 
into a reusable script that can be run as a cron job.

Sections \ref{Implementation} and onwards covers the construction of the Docker 
image itself.


\section{Building}

We use a [[<<Makefile>>]] to build this documentation and all files herein.
This means that one can simply run [[make filename]] to extract the file one is 
interested in.

We use the makefiles framework\footnote{%
  URL: \texttt{https://github.com/dbosk/makefiles}.
}.
This means that we get many extra default pattern rules.
<<Makefile>>=
.PHONY: all
all: grader.pdf

<<targets>>

<<targets for docker image>>

.PHONY: clean
clean:

.PHONY: distclean
distclean:

INCLUDE_MAKEFILES=./makefiles
include ${INCLUDE_MAKEFILES}/noweb.mk

Makefile: grader.nw
	${NOTANGLE.mk}
@


\section{Basic usage}\label{BasicUsage}

We need to set use the following setup for the Docker container to work.
We need the following environment variables:
\begin{itemize}
\item [[KRB_USER]] and [[KRB_PASS]] containing the Kerberos username (including 
@realm) and password for the user to access the SSH servers.
\item [[CANVAS_SERVER]] and [[CANVAS_TOKEN]] to authenticate the [[canvaslms]] 
command.
See [[canvaslms login -h]].
\item [[LADOK_USER]] and [[LADOK_PASS]] containing the LADOK username and 
password to use.
See [[ladok login -h]].
\item [[REPOBEE_USER]], [[REPOBEE_URL]], [[REPOBEE_TOKEN]] as configuration for 
RepoBee.
See the RepoBee documentation for details:
\begin{center}
\texttt{https://docs.repobee.org/en/stable/getting\textunderscore{}started.html}.
\end{center}
\item [[COURSE_CODE]] containing a space-separated list of regular expressions 
for the course code, [[COURSE_CODE_ORG]] containing a space-separated list of 
  course code and GitHub organization name pairs.
\end{itemize}
We also must mount the AFS root (/afs) in the container (to access 
/afs/kth.se).
However, due to how the container is run by Docker, it doesn't get write access 
through the user's Kerberos credentials.

So if we have set those environment variables and have AFS mounted in /afs, 
then we can run this image as follows:
\begin{verbatim}
docker run \
  -e KRB_USER -e KRB_PASS \
  -e CANVAS_SERVER -e CANVAS_TOKEN \
  -e LADOK_USER -e LADOK_PASS \
  -e REPBEE_USER -e REPOBEE_URL -e REPOBEE_TOKEN \
  -e COURSE_CODE -e COURSE_CODE_ORG \
  -v /afs:/afs \
  -it \
    dbosk/grader:latest
\end{verbatim}

We note that the image is available from Docker Hub as [[dbosk/grader]].


\section{Detailed usage}\label{DetailedUsage}

Now, one purpose of the [[grader]] Docker image is to run grading scripts 
easily with the latest versions of [[canvaslms]], [[ladok]] and [[repobee]] 
commands.
In addition to running it in interactive mode (using [[-it]] arguments) as 
above, we have two more options:
\begin{enumerate}
\item\label{NewContainer}
  create a new Docker image using [[grader]] as base, or
\item\label{ExtDir}
  have scripts outside the container and run them inside.
\end{enumerate}

Say we want to run the following script:
<<ladok.sh>>=
#!/bin/bash

source /grader/credentials

courses="(prg[mi]|datintro)2[1-9]"
components="(LAB[13]|MAT1|KAL1)"

canvaslms results -c "$courses" -A "$components" | \
  sed -E "s/ ?[HV]T[0-9]{2}( \(.*\))?//" | \
  ladok report -fv

datorprov_courses="(prg[mi])2[2-9]"

canvaslms results -c "$datorprov_courses" -A "LAB2" \
  -S canvaslms.grades.maxgradesurvey | \
    sed -E "s/ ?[HV]T[0-9]{2}( \(.*\))?//" | \
    ladok report -fv
@

For option \ref{ExtDir}, we could put [[<<ladok.sh>>]] and [[credentials]] in a 
directory, say [[~/ladok]].
Then we mount that directory in the container when we run it, and run the 
script in that mounted directory.
\begin{verbatim}
docker run \
  -e KRB_USER -e KRB_PASS \
  -e CANVAS_SERVER -e CANVAS_TOKEN \
  -e LADOK_USER -e LADOK_PASS \
  -e REPBEE_USER -e REPOBEE_URL -e REPOBEE_TOKEN \
  -e COURSE_CODE -e COURSE_CODE_ORG \
  -v /afs:/afs \
  -v ~/ladok:/grader \
    dbosk/grader:latest /bin/bash /grader/ladok.sh
\end{verbatim}

Option \ref{NewContainer} above, is very similar to the [[<<Dockerfile>>]] 
documented below.
Building it is essentially also the same.
The essential difference is the root image used:
<<Dockerfile.ladok>>=
FROM dbosk/grader

COPY ladok.sh credentials /grader

CMD ["/bin/bash", "/grader/ladok.sh"]
@

Finally, let's add the targets to the Makefile to build these.
We need to specify these explicitly, since the pattern rules only match files 
with the same stem.
<<targets>>=
ladok.sh Dockerfile.ladok: grader.nw
	${NOTANGLE}

.PHONY: clean-detailed-examples
clean: clean-detailed-examples
clean-detailed-examples:
	${RM} ladok.sh Dockerfile.ladok
@


\section{A suitable cron job}\label{CronJob}

Now, let's generalize what we did for option \ref{ExtDir} above.
We want to write a short script, [[<<grader.sh>>]]\footnote{%
  Note that the [[<<Makefile>>]] constructed later allows us to build this 
  script by running [[make grader.sh]].
}, that can be added to our cron tab.
The idea is to have a directory full of scripts that can be executed by this 
script.
<<grader.sh>>=
#!/bin/bash

<<config variables>>

<<update the grader image>>

<<change CWD to script directory>>
<<find all executable scripts>>
<<run each script in the grader container>>
@

Let's also add the building targets.
We don't need to specify any recipe as the pattern rules will solve it.
<<targets>>=
grader.sh: grader.nw

.PHONY: clean-grader-script
clean: clean-grader-script
clean-grader-script:
	${RM} grader.sh
@

Now, the Docker image provided here, is also available on Docker Hub.
We can simply pull a ready-made image.
We let the user override the Docker Hub repo, in case they want to customized 
their own image.
<<update the grader image>>=
docker pull ${GRADER_DH_REPO}:latest
<<config variables>>=
GRADER_DH_REPO="dbosk/grader"
@

We change the working directory to the script directory, this way we don't need 
to take that into consideration in the remaining code.
<<change CWD to script directory>>=
cd ${SCRIPT_DIR}
<<config variables>>=
SCRIPT_DIR="."
@

Now, we will run all scripts that have the executable bit set.
All other files are ignored.
We also ignore files in any subdirectories.
(Note that this should be [[-maxdepth 1]] and it should come before any other 
arguments.)
This way we can have include files without the executable bit set.
<<find all executable scripts>>=
scripts=$(find . -maxdepth 1 -type f -executable)
<<run each script in the grader container>>=
for script in ${scripts}; do
  echo ${script}:
  <<run script in grader container>>
  echo
done
@

Worth noting here that we use [[$(pwd)]] instead of [[.]].
This is because Docker requires at least two characters, so we give the 
absolute path instead of the relative one.
<<run script in grader container>>=
docker run \
  -e KRB_USER -e KRB_PASS \
  -e CANVAS_SERVER -e CANVAS_TOKEN \
  -e LADOK_USER -e LADOK_PASS \
  -e REPBEE_USER -e REPOBEE_URL -e REPOBEE_TOKEN \
  -e COURSE_CODE -e COURSE_CODE_ORG \
  -v /afs:/afs \
  -v "$(pwd)":/grader \
    ${GRADER_DH_REPO}:latest /bin/bash "${script}"
@


\section{Building the documentation}

The default building of the documentation will not work since we don't have any 
preamble in this code.
So we want to use the alternative building method ([[NOWEAVE.pdf]] instead of 
[[NOWEAVE.tex]]).

Consequently, we want to specify [[grader.tex]] as intermediate so that we 
build the documentation PDF directly, so that NOWEB will provide the preamble.
If [[grader.tex]] exists, Make will try to make the PDF from the TeX file, not 
from the NOWEB file directly.
<<targets>>=
.INTERMEDIATE: grader.tex
grader.pdf: grader.nw
	${NOWEAVE.pdf}
@

We also want to remove all the output files from LaTeX when we target clean.
We simply ``hook'' this cleaning target to the [[clean]] target.
<<targets>>=
.PHONY: clean-pdf
clean: clean-pdf
clean-pdf:
	${RM} grader.tex grader.mk
	${RM} grader.aux
	${RM} grader.fdb_latexmk
	${RM} grader.fls
	${RM} grader.log
	${RM} grader.pdf
@


\section{[[grader]] image implementation overview}\label{Implementation}

We want to build a Docker image to run all the necessary grading in the course.
We use RepoBee to work with the students' repos.
However, we can't base our work on that image since it uses Alpine, which 
doesn't provide an SSH version that can handle Kerberos.
We need Kerberos to authenticate to KTH.
Then we install the depends and grading scripts and run them all by default.
<<Dockerfile>>=
FROM ubuntu

USER root
WORKDIR grader

<<set up canvaslms and ladok3 in container>>
<<set up repobee in container>>
<<set up SSH in container>>

CMD ["/bin/bash"]
@

Now, we build this file as follows.
<<targets>>=
Dockerfile: grader.nw
	${NOTANGLE}

.PHONY: clean clean-docker
clean: clean-docker
clean-docker:
	${RM} Dockerfile
@

Next is building the Docker image, we use GNU Make for this.
We use the phony target [[${IMAGE_TARGET}]].
This variable should be updated whenever we change the assignments, so that the 
grading procedure can vary between courses.
<<targets for docker image>>=
IMAGE_TARGET=   dbosk/grader
IMAGE_TAG=      $(shell date +%Y%m%d-%H%M)

.PHONY: all
all: ${IMAGE_TARGET}

.PHONY: ${IMAGE_TARGET}
${IMAGE_TARGET}: Dockerfile
	<<run docker to build the image>>

.PHONY: distclean distclean-docker
distclean: distclean-docker
distclean-docker:
	<<clean docker images>>

<<publish target to push image to Docker Hub>>
<<build targets for files for image>>
<<clean targets>>
@


\section{Building a multi-platform image}

We want to be able to use this image on both amd64 (laptop, server etc.) and 
arm64 (Raspberry Pi).
This means that we must build the image for those two platforms, otherwise the 
image will be usable only on the platform on which it was built.

To build multi-platform images, we need to use [[docker buildx]] instead of 
[[docker build]].
This also means that we need something better than the [[docker.io]] package on 
Ubuntu.
We also need the binary formats (binfmt) of the target platforms.
To make life easy for anyone who wants to build multi-platform images, we will 
add a target that performs the required setup.
<<targets for docker image>>=
.PHONY: multiplatform-setup
multiplatform-setup:
	<<install docker-ce from Docker's Ubuntu repo>>
	<<set up the binfmt>>
	<<add multiplatform builder>>
@

We need Docker Desktop or Docker CE.
We can get this from Docker's own Ubuntu repos\footnote{%
  See Docker's official documentation for details:
  \texttt{https://docs.docker.com/engine/install/ubuntu/\#set-up-the-repository}.
}.
At the time of writing, adding those and installing Docker could be done along 
the following lines.
<<install docker-ce from Docker's Ubuntu repo>>=
sudo mkdir -m 0755 -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
  | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
(echo -n "deb [arch=$(dpkg --print-architecture)"; \
 echo -n " signed-by=/etc/apt/keyrings/ docker.gpg]"; \
 echo -n " https://download.docker.com/linux/ubuntu"; \
 echo    " $(lsb_release -cs) stable") \
  | sudo tee /etc/apt/sources.list.d/docker.list > /dev /null
sudo apt update
sudo apt install docker-ce
@

Now we should have [[docker buildx]].
However, we need the binary formats (binfmt) for the other platforms to be able 
to build multi-platform images, so we must install them.
The following answer on StackExchange gives a good idea to start from:
\begin{center}
  \texttt{https://stackoverflow.com/a/70837025/1305099}
\end{center}
However, we should update the \texttt{binfmt} image used.
That image moved from Docker's own to that of LinuxKit.
It's just to find the latest tag in the list of tags on their Docker Hub,
\begin{center}
  \texttt{https://hub.docker.com/r/linuxkit/binfmt/tags},
\end{center}
and then use that tag like this.
<<set up the binfmt>>=
docker run --rm --privileged \
  linuxkit/binfmt:ecd24b710cad869af6a4716809f62d7164286367
@

Now, to be able to use the other binary formats when building, we must create a 
builder that uses them.
<<add multiplatform builder>>=
docker buildx create --use --name multiplatform-builder
@

Finally, we use [[buildx]] to build the image.
Now, this is a bit special.
Unlike the normal build, buildx doesn't create a usable image that can be found 
by [[docker image ls]].
A multi-platform image must be pushed when created, so we defer building it to 
§ \ref{PushImage}.
Instead, we build a locally usable image here.
This way, we can build an image quickly, test it and then go for the 
multi-platform build when it's time to push it.
<<run docker to build the image>>=
docker build -t $@ .
@

If we want to clean this image, we need to do the following.
<<clean docker images>>=
-docker image rm -f ${IMAGE_TARGET}
@


\section{Push image to Docker Hub}\label{PushImage}

We want to publish a ready-made image on Docker Hub to make updates easier.
This way, once a new image is pushed, all systems using it would just need to 
pull instead of building a new image on their own.

As mentioned above, we want to build and push in one step to achieve a 
multi-platform image.
To do this we add [[--push]] to the [[buildx build]].

We should also specify the two platforms that we're interested in, we do this 
using [[--platform]].

Finally, we want to also update the [[latest]] tag.
We do this by issuing another identical build, but with the [[latest]] tag 
instead.
This will use the cached versions from the first build, so we won't redo any 
building.
<<publish target to push image to Docker Hub>>=
.PHONY: publish
publish:
	docker buildx build --push --platform linux/amd64,linux/arm64 \
	  -t ${IMAGE_TARGET}:${IMAGE_TAG} .
	docker buildx build --push --platform linux/amd64,linux/arm64 \
	  -t ${IMAGE_TARGET}:latest .
@

To clean, we should remove those tags as well.
We should also remove any dangling layers from the cache.
<<clean docker images>>=
-docker image rm -f ${IMAGE_TARGET}:${IMAGE_TAG}
-docker image rm -f ${IMAGE_TARGET}:latest
docker system prune
@


\section{Set up \texttt{canvaslms} and \texttt{ladok3}}

We need the [[canvaslms]] command inside the container since the scripts rely 
heavily on this.
So we install it using [[pip]].
Now, since it depends on the [[cryptography]] package, we need to install the 
dependencies\footnote{%
  See \texttt{https://stackoverflow.com/a/53562393/1305099}.
}.
We also want to install the [[ladok]] command to report whenever we have any 
passing results.
<<set up canvaslms and ladok3 in container>>=
RUN apt-get update && \
  apt-get install -y \
    python3-pip && \
  python3 -m pip install --no-cache-dir canvaslms ladok3 && \
  apt-get autoremove -y
@


\section{Set up \texttt{repobee}}

We also want RepoBee in the container.
So we run their install script to install it rather than using their Docker 
image.
Their Docker image is based on Alpine, which doesn't have SSH that supports 
Kerberos.

We note that we update the [[PATH]] environment variable before the 
installation.
The RepoBee installer checks for [[repobee]] being on the [[PATH]] and asks us 
if we want to add it if it's not already there.
This, of course, breaks the image creation.
<<set up repobee in container>>=
ENV PATH "$PATH:/root/.repobee/bin"
RUN apt-get update && apt-get install -y curl git python3-venv && \
  curl -s https://repobee.org/install.sh > repobee-install.sh && \
  bash repobee-install.sh && rm repobee-install.sh
@


\section{Set up SSH}

We need to have SSH inside the container.
Since we want to interact with KTH systems, we also need Kerberos.
Then we want to have server specific configuration (the [[config]] file).
<<set up SSH in container>>=
RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive TZ=Europe/Stockholm apt-get install -y \
    openssh-client heimdal-clients
COPY config /root/.ssh/
RUN chmod -R 0600 /root/.ssh
@

To do this we need the [[Makefile]] to build the [[config]] file.
We start from the local config, which should probably be edited.
<<build targets for files for image>>=
config: ${HOME}/.ssh/config
	${CP} $^ $@
	${EDITOR} $@

${IMAGE_TARGET}: config
<<clean targets>>=
.PHONY: clean-ssh
clean: clean-ssh

clean-ssh:
	${RM} config
@

To set up the Kerberos authentication, we simply take the credentials from the 
environment.
<<initialize SSH authentication for run>>=
krb_pass_file=$(mktemp)

echo $KRB_PASS > $krb_pass_file
kinit -f --password-file=$krb_pass_file $KRB_USER

rm $krb_pass_file
@

Now, we'd like to do this authentication automatically when starting bash.
<<set up SSH in container>>=
COPY bashrc /root/.bashrc
<<build targets for files for image>>=
${IMAGE_TARGET}: bashrc
bashrc: grader.nw
	${NOTANGLE.sh}
<<bashrc>>=
<<initialize SSH authentication for run>>

